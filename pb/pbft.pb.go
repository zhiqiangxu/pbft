// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pbft.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type NodeLoginInput struct {
	Timestamp            int64    `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Index                int32    `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Sign                 []byte   `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeLoginInput) Reset()         { *m = NodeLoginInput{} }
func (m *NodeLoginInput) String() string { return proto.CompactTextString(m) }
func (*NodeLoginInput) ProtoMessage()    {}
func (*NodeLoginInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_pbft_479864f62e635e05, []int{0}
}
func (m *NodeLoginInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeLoginInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeLoginInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NodeLoginInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeLoginInput.Merge(dst, src)
}
func (m *NodeLoginInput) XXX_Size() int {
	return m.Size()
}
func (m *NodeLoginInput) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeLoginInput.DiscardUnknown(m)
}

var xxx_messageInfo_NodeLoginInput proto.InternalMessageInfo

func (m *NodeLoginInput) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *NodeLoginInput) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *NodeLoginInput) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type NodeLoginOutput struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeLoginOutput) Reset()         { *m = NodeLoginOutput{} }
func (m *NodeLoginOutput) String() string { return proto.CompactTextString(m) }
func (*NodeLoginOutput) ProtoMessage()    {}
func (*NodeLoginOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_pbft_479864f62e635e05, []int{1}
}
func (m *NodeLoginOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeLoginOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeLoginOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NodeLoginOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeLoginOutput.Merge(dst, src)
}
func (m *NodeLoginOutput) XXX_Size() int {
	return m.Size()
}
func (m *NodeLoginOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeLoginOutput.DiscardUnknown(m)
}

var xxx_messageInfo_NodeLoginOutput proto.InternalMessageInfo

func (m *NodeLoginOutput) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *NodeLoginOutput) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type NodeViewOutput struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	View                 int32    `protobuf:"varint,3,opt,name=view,proto3" json:"view,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeViewOutput) Reset()         { *m = NodeViewOutput{} }
func (m *NodeViewOutput) String() string { return proto.CompactTextString(m) }
func (*NodeViewOutput) ProtoMessage()    {}
func (*NodeViewOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_pbft_479864f62e635e05, []int{2}
}
func (m *NodeViewOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeViewOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeViewOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NodeViewOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeViewOutput.Merge(dst, src)
}
func (m *NodeViewOutput) XXX_Size() int {
	return m.Size()
}
func (m *NodeViewOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeViewOutput.DiscardUnknown(m)
}

var xxx_messageInfo_NodeViewOutput proto.InternalMessageInfo

func (m *NodeViewOutput) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *NodeViewOutput) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *NodeViewOutput) GetView() int32 {
	if m != nil {
		return m.View
	}
	return 0
}

type ClientMsgInput struct {
	CanForward2Primary   bool     `protobuf:"varint,1,opt,name=canForward2Primary,proto3" json:"canForward2Primary,omitempty"`
	NeedQuorumReply      bool     `protobuf:"varint,2,opt,name=needQuorumReply,proto3" json:"needQuorumReply,omitempty"`
	Timestamp            int64    `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Nonce                uint32   `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Data                 []byte   `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientMsgInput) Reset()         { *m = ClientMsgInput{} }
func (m *ClientMsgInput) String() string { return proto.CompactTextString(m) }
func (*ClientMsgInput) ProtoMessage()    {}
func (*ClientMsgInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_pbft_479864f62e635e05, []int{3}
}
func (m *ClientMsgInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientMsgInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientMsgInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClientMsgInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientMsgInput.Merge(dst, src)
}
func (m *ClientMsgInput) XXX_Size() int {
	return m.Size()
}
func (m *ClientMsgInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientMsgInput.DiscardUnknown(m)
}

var xxx_messageInfo_ClientMsgInput proto.InternalMessageInfo

func (m *ClientMsgInput) GetCanForward2Primary() bool {
	if m != nil {
		return m.CanForward2Primary
	}
	return false
}

func (m *ClientMsgInput) GetNeedQuorumReply() bool {
	if m != nil {
		return m.NeedQuorumReply
	}
	return false
}

func (m *ClientMsgInput) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ClientMsgInput) GetNonce() uint32 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *ClientMsgInput) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ClientMsgOutput struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Replies              [][]byte `protobuf:"bytes,3,rep,name=replies" json:"replies,omitempty"`
	Signs                [][]byte `protobuf:"bytes,4,rep,name=signs" json:"signs,omitempty"`
	NodeIdx              []int32  `protobuf:"varint,5,rep,packed,name=nodeIdx" json:"nodeIdx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientMsgOutput) Reset()         { *m = ClientMsgOutput{} }
func (m *ClientMsgOutput) String() string { return proto.CompactTextString(m) }
func (*ClientMsgOutput) ProtoMessage()    {}
func (*ClientMsgOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_pbft_479864f62e635e05, []int{4}
}
func (m *ClientMsgOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientMsgOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientMsgOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClientMsgOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientMsgOutput.Merge(dst, src)
}
func (m *ClientMsgOutput) XXX_Size() int {
	return m.Size()
}
func (m *ClientMsgOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientMsgOutput.DiscardUnknown(m)
}

var xxx_messageInfo_ClientMsgOutput proto.InternalMessageInfo

func (m *ClientMsgOutput) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ClientMsgOutput) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ClientMsgOutput) GetReplies() [][]byte {
	if m != nil {
		return m.Replies
	}
	return nil
}

func (m *ClientMsgOutput) GetSigns() [][]byte {
	if m != nil {
		return m.Signs
	}
	return nil
}

func (m *ClientMsgOutput) GetNodeIdx() []int32 {
	if m != nil {
		return m.NodeIdx
	}
	return nil
}

type NodePrePreparePiggyBackedMsg struct {
	View                 int64           `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
	N                    int64           `protobuf:"varint,2,opt,name=n,proto3" json:"n,omitempty"`
	MessageDigest        string          `protobuf:"bytes,3,opt,name=messageDigest,proto3" json:"messageDigest,omitempty"`
	Message              *ClientMsgInput `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NodePrePreparePiggyBackedMsg) Reset()         { *m = NodePrePreparePiggyBackedMsg{} }
func (m *NodePrePreparePiggyBackedMsg) String() string { return proto.CompactTextString(m) }
func (*NodePrePreparePiggyBackedMsg) ProtoMessage()    {}
func (*NodePrePreparePiggyBackedMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_pbft_479864f62e635e05, []int{5}
}
func (m *NodePrePreparePiggyBackedMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodePrePreparePiggyBackedMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodePrePreparePiggyBackedMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NodePrePreparePiggyBackedMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodePrePreparePiggyBackedMsg.Merge(dst, src)
}
func (m *NodePrePreparePiggyBackedMsg) XXX_Size() int {
	return m.Size()
}
func (m *NodePrePreparePiggyBackedMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_NodePrePreparePiggyBackedMsg.DiscardUnknown(m)
}

var xxx_messageInfo_NodePrePreparePiggyBackedMsg proto.InternalMessageInfo

func (m *NodePrePreparePiggyBackedMsg) GetView() int64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *NodePrePreparePiggyBackedMsg) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

func (m *NodePrePreparePiggyBackedMsg) GetMessageDigest() string {
	if m != nil {
		return m.MessageDigest
	}
	return ""
}

func (m *NodePrePreparePiggyBackedMsg) GetMessage() *ClientMsgInput {
	if m != nil {
		return m.Message
	}
	return nil
}

type NodePrePrepareMsg struct {
	View                 int64    `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
	N                    int64    `protobuf:"varint,2,opt,name=n,proto3" json:"n,omitempty"`
	MessageDigest        string   `protobuf:"bytes,3,opt,name=messageDigest,proto3" json:"messageDigest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodePrePrepareMsg) Reset()         { *m = NodePrePrepareMsg{} }
func (m *NodePrePrepareMsg) String() string { return proto.CompactTextString(m) }
func (*NodePrePrepareMsg) ProtoMessage()    {}
func (*NodePrePrepareMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_pbft_479864f62e635e05, []int{6}
}
func (m *NodePrePrepareMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodePrePrepareMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodePrePrepareMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NodePrePrepareMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodePrePrepareMsg.Merge(dst, src)
}
func (m *NodePrePrepareMsg) XXX_Size() int {
	return m.Size()
}
func (m *NodePrePrepareMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_NodePrePrepareMsg.DiscardUnknown(m)
}

var xxx_messageInfo_NodePrePrepareMsg proto.InternalMessageInfo

func (m *NodePrePrepareMsg) GetView() int64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *NodePrePrepareMsg) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

func (m *NodePrePrepareMsg) GetMessageDigest() string {
	if m != nil {
		return m.MessageDigest
	}
	return ""
}

type MessageDigestLookupInput struct {
	Digest               string   `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageDigestLookupInput) Reset()         { *m = MessageDigestLookupInput{} }
func (m *MessageDigestLookupInput) String() string { return proto.CompactTextString(m) }
func (*MessageDigestLookupInput) ProtoMessage()    {}
func (*MessageDigestLookupInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_pbft_479864f62e635e05, []int{7}
}
func (m *MessageDigestLookupInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageDigestLookupInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageDigestLookupInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MessageDigestLookupInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageDigestLookupInput.Merge(dst, src)
}
func (m *MessageDigestLookupInput) XXX_Size() int {
	return m.Size()
}
func (m *MessageDigestLookupInput) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageDigestLookupInput.DiscardUnknown(m)
}

var xxx_messageInfo_MessageDigestLookupInput proto.InternalMessageInfo

func (m *MessageDigestLookupInput) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

type MessageDigestLookupOutput struct {
	Code                 int32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	ClientMsgInput       *ClientMsgInput `protobuf:"bytes,3,opt,name=clientMsgInput" json:"clientMsgInput,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *MessageDigestLookupOutput) Reset()         { *m = MessageDigestLookupOutput{} }
func (m *MessageDigestLookupOutput) String() string { return proto.CompactTextString(m) }
func (*MessageDigestLookupOutput) ProtoMessage()    {}
func (*MessageDigestLookupOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_pbft_479864f62e635e05, []int{8}
}
func (m *MessageDigestLookupOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageDigestLookupOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageDigestLookupOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MessageDigestLookupOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageDigestLookupOutput.Merge(dst, src)
}
func (m *MessageDigestLookupOutput) XXX_Size() int {
	return m.Size()
}
func (m *MessageDigestLookupOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageDigestLookupOutput.DiscardUnknown(m)
}

var xxx_messageInfo_MessageDigestLookupOutput proto.InternalMessageInfo

func (m *MessageDigestLookupOutput) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *MessageDigestLookupOutput) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *MessageDigestLookupOutput) GetClientMsgInput() *ClientMsgInput {
	if m != nil {
		return m.ClientMsgInput
	}
	return nil
}

type NodePreparedMsg struct {
	View                 int64    `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
	N                    int64    `protobuf:"varint,2,opt,name=n,proto3" json:"n,omitempty"`
	MessageDigest        string   `protobuf:"bytes,3,opt,name=messageDigest,proto3" json:"messageDigest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodePreparedMsg) Reset()         { *m = NodePreparedMsg{} }
func (m *NodePreparedMsg) String() string { return proto.CompactTextString(m) }
func (*NodePreparedMsg) ProtoMessage()    {}
func (*NodePreparedMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_pbft_479864f62e635e05, []int{9}
}
func (m *NodePreparedMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodePreparedMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodePreparedMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NodePreparedMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodePreparedMsg.Merge(dst, src)
}
func (m *NodePreparedMsg) XXX_Size() int {
	return m.Size()
}
func (m *NodePreparedMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_NodePreparedMsg.DiscardUnknown(m)
}

var xxx_messageInfo_NodePreparedMsg proto.InternalMessageInfo

func (m *NodePreparedMsg) GetView() int64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *NodePreparedMsg) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

func (m *NodePreparedMsg) GetMessageDigest() string {
	if m != nil {
		return m.MessageDigest
	}
	return ""
}

type NodePreparedSignedMsg struct {
	PreparedMsg          *NodePreparedMsg `protobuf:"bytes,1,opt,name=preparedMsg" json:"preparedMsg,omitempty"`
	Index                int32            `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Sign                 string           `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *NodePreparedSignedMsg) Reset()         { *m = NodePreparedSignedMsg{} }
func (m *NodePreparedSignedMsg) String() string { return proto.CompactTextString(m) }
func (*NodePreparedSignedMsg) ProtoMessage()    {}
func (*NodePreparedSignedMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_pbft_479864f62e635e05, []int{10}
}
func (m *NodePreparedSignedMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodePreparedSignedMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodePreparedSignedMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NodePreparedSignedMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodePreparedSignedMsg.Merge(dst, src)
}
func (m *NodePreparedSignedMsg) XXX_Size() int {
	return m.Size()
}
func (m *NodePreparedSignedMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_NodePreparedSignedMsg.DiscardUnknown(m)
}

var xxx_messageInfo_NodePreparedSignedMsg proto.InternalMessageInfo

func (m *NodePreparedSignedMsg) GetPreparedMsg() *NodePreparedMsg {
	if m != nil {
		return m.PreparedMsg
	}
	return nil
}

func (m *NodePreparedSignedMsg) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *NodePreparedSignedMsg) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

type NodeCommitMsg struct {
	View                 int64    `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
	N                    int64    `protobuf:"varint,2,opt,name=n,proto3" json:"n,omitempty"`
	MessageDigest        string   `protobuf:"bytes,3,opt,name=messageDigest,proto3" json:"messageDigest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeCommitMsg) Reset()         { *m = NodeCommitMsg{} }
func (m *NodeCommitMsg) String() string { return proto.CompactTextString(m) }
func (*NodeCommitMsg) ProtoMessage()    {}
func (*NodeCommitMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_pbft_479864f62e635e05, []int{11}
}
func (m *NodeCommitMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeCommitMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeCommitMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NodeCommitMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeCommitMsg.Merge(dst, src)
}
func (m *NodeCommitMsg) XXX_Size() int {
	return m.Size()
}
func (m *NodeCommitMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeCommitMsg.DiscardUnknown(m)
}

var xxx_messageInfo_NodeCommitMsg proto.InternalMessageInfo

func (m *NodeCommitMsg) GetView() int64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *NodeCommitMsg) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

func (m *NodeCommitMsg) GetMessageDigest() string {
	if m != nil {
		return m.MessageDigest
	}
	return ""
}

type NodeCheckpointMsg struct {
	CheckpointMsgContent *NodeCheckpointMsg_NodeCheckpointMsgContent `protobuf:"bytes,1,opt,name=checkpointMsgContent" json:"checkpointMsgContent,omitempty"`
	Index                int32                                       `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Sign                 string                                      `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *NodeCheckpointMsg) Reset()         { *m = NodeCheckpointMsg{} }
func (m *NodeCheckpointMsg) String() string { return proto.CompactTextString(m) }
func (*NodeCheckpointMsg) ProtoMessage()    {}
func (*NodeCheckpointMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_pbft_479864f62e635e05, []int{12}
}
func (m *NodeCheckpointMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeCheckpointMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeCheckpointMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NodeCheckpointMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeCheckpointMsg.Merge(dst, src)
}
func (m *NodeCheckpointMsg) XXX_Size() int {
	return m.Size()
}
func (m *NodeCheckpointMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeCheckpointMsg.DiscardUnknown(m)
}

var xxx_messageInfo_NodeCheckpointMsg proto.InternalMessageInfo

func (m *NodeCheckpointMsg) GetCheckpointMsgContent() *NodeCheckpointMsg_NodeCheckpointMsgContent {
	if m != nil {
		return m.CheckpointMsgContent
	}
	return nil
}

func (m *NodeCheckpointMsg) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *NodeCheckpointMsg) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

type NodeCheckpointMsg_NodeCheckpointMsgContent struct {
	N                    int64    `protobuf:"varint,1,opt,name=n,proto3" json:"n,omitempty"`
	StateDigest          string   `protobuf:"bytes,2,opt,name=stateDigest,proto3" json:"stateDigest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeCheckpointMsg_NodeCheckpointMsgContent) Reset() {
	*m = NodeCheckpointMsg_NodeCheckpointMsgContent{}
}
func (m *NodeCheckpointMsg_NodeCheckpointMsgContent) String() string {
	return proto.CompactTextString(m)
}
func (*NodeCheckpointMsg_NodeCheckpointMsgContent) ProtoMessage() {}
func (*NodeCheckpointMsg_NodeCheckpointMsgContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_pbft_479864f62e635e05, []int{12, 0}
}
func (m *NodeCheckpointMsg_NodeCheckpointMsgContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeCheckpointMsg_NodeCheckpointMsgContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeCheckpointMsg_NodeCheckpointMsgContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NodeCheckpointMsg_NodeCheckpointMsgContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeCheckpointMsg_NodeCheckpointMsgContent.Merge(dst, src)
}
func (m *NodeCheckpointMsg_NodeCheckpointMsgContent) XXX_Size() int {
	return m.Size()
}
func (m *NodeCheckpointMsg_NodeCheckpointMsgContent) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeCheckpointMsg_NodeCheckpointMsgContent.DiscardUnknown(m)
}

var xxx_messageInfo_NodeCheckpointMsg_NodeCheckpointMsgContent proto.InternalMessageInfo

func (m *NodeCheckpointMsg_NodeCheckpointMsgContent) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

func (m *NodeCheckpointMsg_NodeCheckpointMsgContent) GetStateDigest() string {
	if m != nil {
		return m.StateDigest
	}
	return ""
}

type NodeViewChangeMsg struct {
	View                 int64                    `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
	N                    int64                    `protobuf:"varint,2,opt,name=n,proto3" json:"n,omitempty"`
	CheckpointMsg        []*NodeCheckpointMsg     `protobuf:"bytes,3,rep,name=checkpointMsg" json:"checkpointMsg,omitempty"`
	PreparedSignedMsg    []*NodePreparedSignedMsg `protobuf:"bytes,4,rep,name=preparedSignedMsg" json:"preparedSignedMsg,omitempty"`
	Sign                 string                   `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *NodeViewChangeMsg) Reset()         { *m = NodeViewChangeMsg{} }
func (m *NodeViewChangeMsg) String() string { return proto.CompactTextString(m) }
func (*NodeViewChangeMsg) ProtoMessage()    {}
func (*NodeViewChangeMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_pbft_479864f62e635e05, []int{13}
}
func (m *NodeViewChangeMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeViewChangeMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeViewChangeMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NodeViewChangeMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeViewChangeMsg.Merge(dst, src)
}
func (m *NodeViewChangeMsg) XXX_Size() int {
	return m.Size()
}
func (m *NodeViewChangeMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeViewChangeMsg.DiscardUnknown(m)
}

var xxx_messageInfo_NodeViewChangeMsg proto.InternalMessageInfo

func (m *NodeViewChangeMsg) GetView() int64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *NodeViewChangeMsg) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

func (m *NodeViewChangeMsg) GetCheckpointMsg() []*NodeCheckpointMsg {
	if m != nil {
		return m.CheckpointMsg
	}
	return nil
}

func (m *NodeViewChangeMsg) GetPreparedSignedMsg() []*NodePreparedSignedMsg {
	if m != nil {
		return m.PreparedSignedMsg
	}
	return nil
}

func (m *NodeViewChangeMsg) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

type NodeNewViewMsg struct {
	View                 int64                `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
	ViewChangeMsg        []*NodeViewChangeMsg `protobuf:"bytes,2,rep,name=viewChangeMsg" json:"viewChangeMsg,omitempty"`
	PrePrepareMsg        []*NodePrePrepareMsg `protobuf:"bytes,3,rep,name=prePrepareMsg" json:"prePrepareMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *NodeNewViewMsg) Reset()         { *m = NodeNewViewMsg{} }
func (m *NodeNewViewMsg) String() string { return proto.CompactTextString(m) }
func (*NodeNewViewMsg) ProtoMessage()    {}
func (*NodeNewViewMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_pbft_479864f62e635e05, []int{14}
}
func (m *NodeNewViewMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeNewViewMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeNewViewMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NodeNewViewMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeNewViewMsg.Merge(dst, src)
}
func (m *NodeNewViewMsg) XXX_Size() int {
	return m.Size()
}
func (m *NodeNewViewMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeNewViewMsg.DiscardUnknown(m)
}

var xxx_messageInfo_NodeNewViewMsg proto.InternalMessageInfo

func (m *NodeNewViewMsg) GetView() int64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *NodeNewViewMsg) GetViewChangeMsg() []*NodeViewChangeMsg {
	if m != nil {
		return m.ViewChangeMsg
	}
	return nil
}

func (m *NodeNewViewMsg) GetPrePrepareMsg() []*NodePrePrepareMsg {
	if m != nil {
		return m.PrePrepareMsg
	}
	return nil
}

type NodeReqSignPreparedInput struct {
	PreparedMsg          *NodePreparedMsg `protobuf:"bytes,1,opt,name=preparedMsg" json:"preparedMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *NodeReqSignPreparedInput) Reset()         { *m = NodeReqSignPreparedInput{} }
func (m *NodeReqSignPreparedInput) String() string { return proto.CompactTextString(m) }
func (*NodeReqSignPreparedInput) ProtoMessage()    {}
func (*NodeReqSignPreparedInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_pbft_479864f62e635e05, []int{15}
}
func (m *NodeReqSignPreparedInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeReqSignPreparedInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeReqSignPreparedInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NodeReqSignPreparedInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeReqSignPreparedInput.Merge(dst, src)
}
func (m *NodeReqSignPreparedInput) XXX_Size() int {
	return m.Size()
}
func (m *NodeReqSignPreparedInput) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeReqSignPreparedInput.DiscardUnknown(m)
}

var xxx_messageInfo_NodeReqSignPreparedInput proto.InternalMessageInfo

func (m *NodeReqSignPreparedInput) GetPreparedMsg() *NodePreparedMsg {
	if m != nil {
		return m.PreparedMsg
	}
	return nil
}

type NodeReqSignPreparedOutput struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Sign                 string   `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeReqSignPreparedOutput) Reset()         { *m = NodeReqSignPreparedOutput{} }
func (m *NodeReqSignPreparedOutput) String() string { return proto.CompactTextString(m) }
func (*NodeReqSignPreparedOutput) ProtoMessage()    {}
func (*NodeReqSignPreparedOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_pbft_479864f62e635e05, []int{16}
}
func (m *NodeReqSignPreparedOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeReqSignPreparedOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeReqSignPreparedOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NodeReqSignPreparedOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeReqSignPreparedOutput.Merge(dst, src)
}
func (m *NodeReqSignPreparedOutput) XXX_Size() int {
	return m.Size()
}
func (m *NodeReqSignPreparedOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeReqSignPreparedOutput.DiscardUnknown(m)
}

var xxx_messageInfo_NodeReqSignPreparedOutput proto.InternalMessageInfo

func (m *NodeReqSignPreparedOutput) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *NodeReqSignPreparedOutput) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *NodeReqSignPreparedOutput) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func init() {
	proto.RegisterType((*NodeLoginInput)(nil), "pb.NodeLoginInput")
	proto.RegisterType((*NodeLoginOutput)(nil), "pb.NodeLoginOutput")
	proto.RegisterType((*NodeViewOutput)(nil), "pb.NodeViewOutput")
	proto.RegisterType((*ClientMsgInput)(nil), "pb.ClientMsgInput")
	proto.RegisterType((*ClientMsgOutput)(nil), "pb.ClientMsgOutput")
	proto.RegisterType((*NodePrePreparePiggyBackedMsg)(nil), "pb.NodePrePreparePiggyBackedMsg")
	proto.RegisterType((*NodePrePrepareMsg)(nil), "pb.NodePrePrepareMsg")
	proto.RegisterType((*MessageDigestLookupInput)(nil), "pb.MessageDigestLookupInput")
	proto.RegisterType((*MessageDigestLookupOutput)(nil), "pb.MessageDigestLookupOutput")
	proto.RegisterType((*NodePreparedMsg)(nil), "pb.NodePreparedMsg")
	proto.RegisterType((*NodePreparedSignedMsg)(nil), "pb.NodePreparedSignedMsg")
	proto.RegisterType((*NodeCommitMsg)(nil), "pb.NodeCommitMsg")
	proto.RegisterType((*NodeCheckpointMsg)(nil), "pb.NodeCheckpointMsg")
	proto.RegisterType((*NodeCheckpointMsg_NodeCheckpointMsgContent)(nil), "pb.NodeCheckpointMsg.NodeCheckpointMsgContent")
	proto.RegisterType((*NodeViewChangeMsg)(nil), "pb.NodeViewChangeMsg")
	proto.RegisterType((*NodeNewViewMsg)(nil), "pb.NodeNewViewMsg")
	proto.RegisterType((*NodeReqSignPreparedInput)(nil), "pb.NodeReqSignPreparedInput")
	proto.RegisterType((*NodeReqSignPreparedOutput)(nil), "pb.NodeReqSignPreparedOutput")
}
func (m *NodeLoginInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeLoginInput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbft(dAtA, i, uint64(m.Timestamp))
	}
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbft(dAtA, i, uint64(m.Index))
	}
	if len(m.Sign) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbft(dAtA, i, uint64(len(m.Sign)))
		i += copy(dAtA[i:], m.Sign)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NodeLoginOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeLoginOutput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbft(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbft(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NodeViewOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeViewOutput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbft(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbft(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.View != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbft(dAtA, i, uint64(m.View))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ClientMsgInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientMsgInput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CanForward2Primary {
		dAtA[i] = 0x8
		i++
		if m.CanForward2Primary {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NeedQuorumReply {
		dAtA[i] = 0x10
		i++
		if m.NeedQuorumReply {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPbft(dAtA, i, uint64(m.Timestamp))
	}
	if m.Nonce != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPbft(dAtA, i, uint64(m.Nonce))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbft(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ClientMsgOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientMsgOutput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbft(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbft(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Replies) > 0 {
		for _, b := range m.Replies {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintPbft(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.Signs) > 0 {
		for _, b := range m.Signs {
			dAtA[i] = 0x22
			i++
			i = encodeVarintPbft(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.NodeIdx) > 0 {
		dAtA2 := make([]byte, len(m.NodeIdx)*10)
		var j1 int
		for _, num1 := range m.NodeIdx {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbft(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NodePrePreparePiggyBackedMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodePrePreparePiggyBackedMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.View != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbft(dAtA, i, uint64(m.View))
	}
	if m.N != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbft(dAtA, i, uint64(m.N))
	}
	if len(m.MessageDigest) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbft(dAtA, i, uint64(len(m.MessageDigest)))
		i += copy(dAtA[i:], m.MessageDigest)
	}
	if m.Message != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPbft(dAtA, i, uint64(m.Message.Size()))
		n3, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NodePrePrepareMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodePrePrepareMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.View != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbft(dAtA, i, uint64(m.View))
	}
	if m.N != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbft(dAtA, i, uint64(m.N))
	}
	if len(m.MessageDigest) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbft(dAtA, i, uint64(len(m.MessageDigest)))
		i += copy(dAtA[i:], m.MessageDigest)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MessageDigestLookupInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageDigestLookupInput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Digest) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbft(dAtA, i, uint64(len(m.Digest)))
		i += copy(dAtA[i:], m.Digest)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MessageDigestLookupOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageDigestLookupOutput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbft(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbft(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.ClientMsgInput != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbft(dAtA, i, uint64(m.ClientMsgInput.Size()))
		n4, err := m.ClientMsgInput.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NodePreparedMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodePreparedMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.View != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbft(dAtA, i, uint64(m.View))
	}
	if m.N != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbft(dAtA, i, uint64(m.N))
	}
	if len(m.MessageDigest) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbft(dAtA, i, uint64(len(m.MessageDigest)))
		i += copy(dAtA[i:], m.MessageDigest)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NodePreparedSignedMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodePreparedSignedMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PreparedMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbft(dAtA, i, uint64(m.PreparedMsg.Size()))
		n5, err := m.PreparedMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbft(dAtA, i, uint64(m.Index))
	}
	if len(m.Sign) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbft(dAtA, i, uint64(len(m.Sign)))
		i += copy(dAtA[i:], m.Sign)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NodeCommitMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeCommitMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.View != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbft(dAtA, i, uint64(m.View))
	}
	if m.N != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbft(dAtA, i, uint64(m.N))
	}
	if len(m.MessageDigest) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbft(dAtA, i, uint64(len(m.MessageDigest)))
		i += copy(dAtA[i:], m.MessageDigest)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NodeCheckpointMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeCheckpointMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CheckpointMsgContent != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbft(dAtA, i, uint64(m.CheckpointMsgContent.Size()))
		n6, err := m.CheckpointMsgContent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbft(dAtA, i, uint64(m.Index))
	}
	if len(m.Sign) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbft(dAtA, i, uint64(len(m.Sign)))
		i += copy(dAtA[i:], m.Sign)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NodeCheckpointMsg_NodeCheckpointMsgContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeCheckpointMsg_NodeCheckpointMsgContent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.N != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbft(dAtA, i, uint64(m.N))
	}
	if len(m.StateDigest) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbft(dAtA, i, uint64(len(m.StateDigest)))
		i += copy(dAtA[i:], m.StateDigest)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NodeViewChangeMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeViewChangeMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.View != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbft(dAtA, i, uint64(m.View))
	}
	if m.N != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPbft(dAtA, i, uint64(m.N))
	}
	if len(m.CheckpointMsg) > 0 {
		for _, msg := range m.CheckpointMsg {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintPbft(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PreparedSignedMsg) > 0 {
		for _, msg := range m.PreparedSignedMsg {
			dAtA[i] = 0x22
			i++
			i = encodeVarintPbft(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Sign) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPbft(dAtA, i, uint64(len(m.Sign)))
		i += copy(dAtA[i:], m.Sign)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NodeNewViewMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeNewViewMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.View != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbft(dAtA, i, uint64(m.View))
	}
	if len(m.ViewChangeMsg) > 0 {
		for _, msg := range m.ViewChangeMsg {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPbft(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PrePrepareMsg) > 0 {
		for _, msg := range m.PrePrepareMsg {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintPbft(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NodeReqSignPreparedInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeReqSignPreparedInput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PreparedMsg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPbft(dAtA, i, uint64(m.PreparedMsg.Size()))
		n7, err := m.PreparedMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NodeReqSignPreparedOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeReqSignPreparedOutput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPbft(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPbft(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Sign) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPbft(dAtA, i, uint64(len(m.Sign)))
		i += copy(dAtA[i:], m.Sign)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintPbft(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NodeLoginInput) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovPbft(uint64(m.Timestamp))
	}
	if m.Index != 0 {
		n += 1 + sovPbft(uint64(m.Index))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovPbft(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeLoginOutput) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPbft(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPbft(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeViewOutput) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPbft(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPbft(uint64(l))
	}
	if m.View != 0 {
		n += 1 + sovPbft(uint64(m.View))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClientMsgInput) Size() (n int) {
	var l int
	_ = l
	if m.CanForward2Primary {
		n += 2
	}
	if m.NeedQuorumReply {
		n += 2
	}
	if m.Timestamp != 0 {
		n += 1 + sovPbft(uint64(m.Timestamp))
	}
	if m.Nonce != 0 {
		n += 1 + sovPbft(uint64(m.Nonce))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPbft(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClientMsgOutput) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPbft(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPbft(uint64(l))
	}
	if len(m.Replies) > 0 {
		for _, b := range m.Replies {
			l = len(b)
			n += 1 + l + sovPbft(uint64(l))
		}
	}
	if len(m.Signs) > 0 {
		for _, b := range m.Signs {
			l = len(b)
			n += 1 + l + sovPbft(uint64(l))
		}
	}
	if len(m.NodeIdx) > 0 {
		l = 0
		for _, e := range m.NodeIdx {
			l += sovPbft(uint64(e))
		}
		n += 1 + sovPbft(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodePrePreparePiggyBackedMsg) Size() (n int) {
	var l int
	_ = l
	if m.View != 0 {
		n += 1 + sovPbft(uint64(m.View))
	}
	if m.N != 0 {
		n += 1 + sovPbft(uint64(m.N))
	}
	l = len(m.MessageDigest)
	if l > 0 {
		n += 1 + l + sovPbft(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovPbft(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodePrePrepareMsg) Size() (n int) {
	var l int
	_ = l
	if m.View != 0 {
		n += 1 + sovPbft(uint64(m.View))
	}
	if m.N != 0 {
		n += 1 + sovPbft(uint64(m.N))
	}
	l = len(m.MessageDigest)
	if l > 0 {
		n += 1 + l + sovPbft(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MessageDigestLookupInput) Size() (n int) {
	var l int
	_ = l
	l = len(m.Digest)
	if l > 0 {
		n += 1 + l + sovPbft(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MessageDigestLookupOutput) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPbft(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPbft(uint64(l))
	}
	if m.ClientMsgInput != nil {
		l = m.ClientMsgInput.Size()
		n += 1 + l + sovPbft(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodePreparedMsg) Size() (n int) {
	var l int
	_ = l
	if m.View != 0 {
		n += 1 + sovPbft(uint64(m.View))
	}
	if m.N != 0 {
		n += 1 + sovPbft(uint64(m.N))
	}
	l = len(m.MessageDigest)
	if l > 0 {
		n += 1 + l + sovPbft(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodePreparedSignedMsg) Size() (n int) {
	var l int
	_ = l
	if m.PreparedMsg != nil {
		l = m.PreparedMsg.Size()
		n += 1 + l + sovPbft(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovPbft(uint64(m.Index))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovPbft(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeCommitMsg) Size() (n int) {
	var l int
	_ = l
	if m.View != 0 {
		n += 1 + sovPbft(uint64(m.View))
	}
	if m.N != 0 {
		n += 1 + sovPbft(uint64(m.N))
	}
	l = len(m.MessageDigest)
	if l > 0 {
		n += 1 + l + sovPbft(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeCheckpointMsg) Size() (n int) {
	var l int
	_ = l
	if m.CheckpointMsgContent != nil {
		l = m.CheckpointMsgContent.Size()
		n += 1 + l + sovPbft(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovPbft(uint64(m.Index))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovPbft(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeCheckpointMsg_NodeCheckpointMsgContent) Size() (n int) {
	var l int
	_ = l
	if m.N != 0 {
		n += 1 + sovPbft(uint64(m.N))
	}
	l = len(m.StateDigest)
	if l > 0 {
		n += 1 + l + sovPbft(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeViewChangeMsg) Size() (n int) {
	var l int
	_ = l
	if m.View != 0 {
		n += 1 + sovPbft(uint64(m.View))
	}
	if m.N != 0 {
		n += 1 + sovPbft(uint64(m.N))
	}
	if len(m.CheckpointMsg) > 0 {
		for _, e := range m.CheckpointMsg {
			l = e.Size()
			n += 1 + l + sovPbft(uint64(l))
		}
	}
	if len(m.PreparedSignedMsg) > 0 {
		for _, e := range m.PreparedSignedMsg {
			l = e.Size()
			n += 1 + l + sovPbft(uint64(l))
		}
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovPbft(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeNewViewMsg) Size() (n int) {
	var l int
	_ = l
	if m.View != 0 {
		n += 1 + sovPbft(uint64(m.View))
	}
	if len(m.ViewChangeMsg) > 0 {
		for _, e := range m.ViewChangeMsg {
			l = e.Size()
			n += 1 + l + sovPbft(uint64(l))
		}
	}
	if len(m.PrePrepareMsg) > 0 {
		for _, e := range m.PrePrepareMsg {
			l = e.Size()
			n += 1 + l + sovPbft(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeReqSignPreparedInput) Size() (n int) {
	var l int
	_ = l
	if m.PreparedMsg != nil {
		l = m.PreparedMsg.Size()
		n += 1 + l + sovPbft(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeReqSignPreparedOutput) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPbft(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPbft(uint64(l))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovPbft(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPbft(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPbft(x uint64) (n int) {
	return sovPbft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NodeLoginInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeLoginInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeLoginInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeLoginOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeLoginOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeLoginOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeViewOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeViewOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeViewOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientMsgInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientMsgInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientMsgInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanForward2Primary", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanForward2Primary = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedQuorumReply", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedQuorumReply = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientMsgOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientMsgOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientMsgOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replies", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Replies = append(m.Replies, make([]byte, postIndex-iNdEx))
			copy(m.Replies[len(m.Replies)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signs = append(m.Signs, make([]byte, postIndex-iNdEx))
			copy(m.Signs[len(m.Signs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbft
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NodeIdx = append(m.NodeIdx, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbft
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbft
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbft
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NodeIdx = append(m.NodeIdx, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeIdx", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodePrePreparePiggyBackedMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodePrePreparePiggyBackedMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodePrePreparePiggyBackedMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			m.N = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.N |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageDigest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageDigest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &ClientMsgInput{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodePrePrepareMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodePrePrepareMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodePrePrepareMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			m.N = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.N |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageDigest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageDigest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageDigestLookupInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageDigestLookupInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageDigestLookupInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Digest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageDigestLookupOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageDigestLookupOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageDigestLookupOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientMsgInput", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientMsgInput == nil {
				m.ClientMsgInput = &ClientMsgInput{}
			}
			if err := m.ClientMsgInput.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodePreparedMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodePreparedMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodePreparedMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			m.N = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.N |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageDigest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageDigest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodePreparedSignedMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodePreparedSignedMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodePreparedSignedMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreparedMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreparedMsg == nil {
				m.PreparedMsg = &NodePreparedMsg{}
			}
			if err := m.PreparedMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeCommitMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeCommitMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeCommitMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			m.N = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.N |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageDigest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageDigest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeCheckpointMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeCheckpointMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeCheckpointMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointMsgContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CheckpointMsgContent == nil {
				m.CheckpointMsgContent = &NodeCheckpointMsg_NodeCheckpointMsgContent{}
			}
			if err := m.CheckpointMsgContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeCheckpointMsg_NodeCheckpointMsgContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeCheckpointMsgContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeCheckpointMsgContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			m.N = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.N |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateDigest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateDigest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeViewChangeMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeViewChangeMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeViewChangeMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			m.N = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.N |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckpointMsg = append(m.CheckpointMsg, &NodeCheckpointMsg{})
			if err := m.CheckpointMsg[len(m.CheckpointMsg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreparedSignedMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreparedSignedMsg = append(m.PreparedSignedMsg, &NodePreparedSignedMsg{})
			if err := m.PreparedSignedMsg[len(m.PreparedSignedMsg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeNewViewMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeNewViewMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeNewViewMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewChangeMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ViewChangeMsg = append(m.ViewChangeMsg, &NodeViewChangeMsg{})
			if err := m.ViewChangeMsg[len(m.ViewChangeMsg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrePrepareMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrePrepareMsg = append(m.PrePrepareMsg, &NodePrePrepareMsg{})
			if err := m.PrePrepareMsg[len(m.PrePrepareMsg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeReqSignPreparedInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeReqSignPreparedInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeReqSignPreparedInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreparedMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreparedMsg == nil {
				m.PreparedMsg = &NodePreparedMsg{}
			}
			if err := m.PreparedMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeReqSignPreparedOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeReqSignPreparedOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeReqSignPreparedOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPbft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPbft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPbft
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPbft
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPbft(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPbft = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPbft   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pbft.proto", fileDescriptor_pbft_479864f62e635e05) }

var fileDescriptor_pbft_479864f62e635e05 = []byte{
	// 709 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x4e, 0x1b, 0x3f,
	0x10, 0x97, 0xd9, 0x2c, 0x90, 0x49, 0x02, 0x7f, 0xfc, 0x87, 0x6a, 0xa9, 0x10, 0x8a, 0xac, 0x1e,
	0x72, 0xa8, 0x72, 0x48, 0x55, 0x55, 0x2a, 0x37, 0x52, 0xb5, 0x02, 0x01, 0x05, 0x57, 0xfd, 0x52,
	0x4f, 0x9b, 0xac, 0xbb, 0x58, 0xb0, 0xb6, 0xbb, 0xeb, 0x10, 0x38, 0xf4, 0xd0, 0x77, 0xe8, 0xb9,
	0x0f, 0xd1, 0xa7, 0xe8, 0xad, 0x7d, 0x84, 0x8a, 0x7b, 0xdf, 0xa1, 0xb2, 0x9d, 0x84, 0xdd, 0xb0,
	0x48, 0xa4, 0x42, 0xe2, 0x30, 0x33, 0xcc, 0xd7, 0xef, 0x37, 0xe3, 0xd9, 0x00, 0xa8, 0xde, 0x47,
	0xdd, 0x56, 0xa9, 0xd4, 0x12, 0xcf, 0xa9, 0x1e, 0x79, 0x07, 0x4b, 0x07, 0x32, 0x62, 0x7b, 0x32,
	0xe6, 0x62, 0x47, 0xa8, 0x81, 0xc6, 0x1b, 0x50, 0xd5, 0x3c, 0x61, 0x99, 0x0e, 0x13, 0x15, 0xa0,
	0x26, 0x6a, 0x79, 0xf4, 0xca, 0x80, 0x57, 0xc1, 0xe7, 0x22, 0x62, 0xe7, 0xc1, 0x5c, 0x13, 0xb5,
	0x7c, 0xea, 0x14, 0x8c, 0xa1, 0x92, 0xf1, 0x58, 0x04, 0x5e, 0x13, 0xb5, 0xea, 0xd4, 0xca, 0xe4,
	0x09, 0x2c, 0x4f, 0x32, 0xbf, 0x1c, 0x68, 0x93, 0x1a, 0x43, 0xa5, 0x2f, 0x23, 0x66, 0xb3, 0xfa,
	0xd4, 0xca, 0xf8, 0x3f, 0xf0, 0x92, 0x2c, 0xb6, 0xe9, 0xaa, 0xd4, 0x88, 0x64, 0xd7, 0xb5, 0xf4,
	0x86, 0xb3, 0xe1, 0x2c, 0x71, 0xc6, 0xeb, 0x8c, 0xb3, 0xa1, 0x6d, 0xc2, 0xa7, 0x56, 0x26, 0xdf,
	0x11, 0x2c, 0x75, 0x4f, 0x39, 0x13, 0x7a, 0x3f, 0x8b, 0x1d, 0xbe, 0x36, 0xe0, 0x7e, 0x28, 0x9e,
	0xcb, 0x74, 0x18, 0xa6, 0x51, 0xe7, 0x30, 0xe5, 0x49, 0x98, 0x5e, 0xd8, 0xd4, 0x8b, 0xb4, 0xe4,
	0x3f, 0xb8, 0x05, 0xcb, 0x82, 0xb1, 0xe8, 0x68, 0x20, 0xd3, 0x41, 0x42, 0x99, 0x3a, 0xbd, 0xb0,
	0x45, 0x17, 0xe9, 0xb4, 0xb9, 0xc8, 0x9c, 0x57, 0xc2, 0x9c, 0x90, 0xa2, 0xcf, 0x82, 0x4a, 0x13,
	0xb5, 0x1a, 0xd4, 0x29, 0xa6, 0xe9, 0x28, 0xd4, 0x61, 0xe0, 0x3b, 0xe6, 0x8c, 0x4c, 0xbe, 0x20,
	0x58, 0x9e, 0x34, 0x3d, 0x13, 0x05, 0x01, 0x2c, 0xa4, 0x4c, 0x9d, 0x72, 0x96, 0x05, 0x5e, 0xd3,
	0x6b, 0xd5, 0xe9, 0x58, 0x35, 0xd5, 0xcd, 0x54, 0xb2, 0xa0, 0x62, 0xed, 0x4e, 0x31, 0xfe, 0x42,
	0x46, 0x6c, 0x27, 0x3a, 0x0f, 0xfc, 0xa6, 0xd7, 0xf2, 0xe9, 0x58, 0x25, 0x5f, 0x11, 0x6c, 0x98,
	0x29, 0x1c, 0xa6, 0xe6, 0x4f, 0x85, 0x29, 0x3b, 0xe4, 0x71, 0x7c, 0xb1, 0x1d, 0xf6, 0x4f, 0x58,
	0xb4, 0x9f, 0x63, 0xdb, 0x6d, 0x88, 0x95, 0x71, 0x1d, 0x90, 0xb0, 0xed, 0x78, 0x14, 0x09, 0xfc,
	0x00, 0x1a, 0x09, 0xcb, 0xb2, 0x30, 0x66, 0xcf, 0x78, 0xcc, 0x32, 0x6d, 0x29, 0xa9, 0xd2, 0xa2,
	0x11, 0x3f, 0x84, 0x85, 0x91, 0xc1, 0x12, 0x53, 0xeb, 0xe0, 0xb6, 0xea, 0xb5, 0x8b, 0x33, 0xa3,
	0x63, 0x17, 0xf2, 0x01, 0x56, 0x8a, 0x5d, 0xdd, 0x61, 0x2b, 0xa4, 0x03, 0xc1, 0x7e, 0xde, 0xb0,
	0x27, 0xe5, 0xc9, 0x40, 0xb9, 0xad, 0xb9, 0x07, 0xf3, 0x91, 0x0b, 0x45, 0x36, 0x74, 0xa4, 0x91,
	0xcf, 0xb0, 0x5e, 0x12, 0x33, 0xd3, 0xd0, 0x9e, 0xc2, 0x52, 0xbf, 0x00, 0xd7, 0x76, 0x57, 0x4e,
	0xc4, 0x94, 0x27, 0x79, 0xef, 0x1e, 0xd9, 0x88, 0x8c, 0xbb, 0x1c, 0x0c, 0x39, 0x87, 0xb5, 0x7c,
	0xea, 0x57, 0x3c, 0x16, 0xae, 0xc0, 0x63, 0xa8, 0xa9, 0xab, 0x7a, 0xb6, 0x4e, 0xad, 0xf3, 0xbf,
	0x69, 0x76, 0xaa, 0x15, 0x9a, 0xf7, 0xbb, 0xc5, 0xe5, 0xa8, 0x8e, 0x2e, 0xc7, 0x5b, 0x68, 0x98,
	0x4c, 0x5d, 0x99, 0x24, 0x5c, 0xdf, 0x25, 0xa4, 0x3f, 0xc8, 0xad, 0x4f, 0xf7, 0x98, 0xf5, 0x4f,
	0x94, 0xe4, 0x96, 0x48, 0xdc, 0x83, 0xd5, 0x7e, 0xde, 0xd0, 0x95, 0x42, 0x33, 0xa1, 0x47, 0xc0,
	0xda, 0x63, 0x60, 0x85, 0xa0, 0xeb, 0x96, 0x51, 0x14, 0x2d, 0xcd, 0x75, 0x7b, 0xf0, 0xf7, 0x77,
	0x21, 0xb8, 0x29, 0xb7, 0xc3, 0x8c, 0xc6, 0x98, 0x9b, 0x50, 0xcb, 0x74, 0xa8, 0xc7, 0x88, 0xdd,
	0x46, 0xe5, 0x4d, 0xe4, 0xe7, 0x08, 0xaf, 0x39, 0xa5, 0xdd, 0xe3, 0x50, 0xc4, 0xb7, 0x7c, 0x2e,
	0x5b, 0xd0, 0x28, 0xa0, 0xb0, 0xc7, 0xa4, 0xd6, 0x59, 0x2b, 0xa5, 0x82, 0x16, 0x7d, 0xf1, 0x0b,
	0x58, 0x51, 0xd3, 0x3b, 0x63, 0xaf, 0x4e, 0xad, 0xb3, 0x3e, 0xbd, 0x24, 0x13, 0x07, 0x7a, 0x3d,
	0x66, 0xc2, 0x8e, 0x9f, 0x5b, 0x8d, 0x6f, 0xc8, 0x7d, 0x1c, 0x0e, 0xd8, 0xd0, 0x80, 0xba, 0x09,
	0xce, 0x16, 0x34, 0xce, 0xf2, 0x98, 0x83, 0xb9, 0x22, 0x80, 0x02, 0x21, 0xb4, 0xe8, 0x6b, 0x82,
	0x55, 0xfe, 0xbe, 0x4c, 0xa3, 0x2f, 0x1c, 0x1f, 0x5a, 0xf4, 0x25, 0x47, 0x6e, 0x7c, 0x94, 0x7d,
	0x32, 0x40, 0xc6, 0x38, 0xdd, 0x0d, 0xf9, 0xb7, 0x87, 0x43, 0x5e, 0xc3, 0x7a, 0x49, 0xca, 0x59,
	0x3f, 0x8d, 0xd3, 0x8b, 0xb6, 0x5d, 0xff, 0x71, 0xb9, 0x89, 0x7e, 0x5d, 0x6e, 0xa2, 0xdf, 0x97,
	0x9b, 0xa8, 0x37, 0x6f, 0x7f, 0x12, 0x3c, 0xfa, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xff, 0x7e, 0x4e,
	0xc8, 0x20, 0x08, 0x00, 0x00,
}
